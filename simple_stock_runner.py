#!/usr/bin/env python3
"""
simple_stock_runner.py - Á∞°ÂåñÁâàËÇ°Á•®ÂàÜÊûêÈÅãË°åÂô®
‰∏ç‰æùË≥¥ aiohttpÔºåÂ∞àÁÇ∫ GitHub Actions Áí∞Â¢ÉË®≠Ë®à

ÈÄôÂÄãÁâàÊú¨ÊòØÁÇ∫‰∫ÜÁ¢∫‰øùÂú®‰ªª‰ΩïÁí∞Â¢É‰∏ãÈÉΩËÉΩÊ≠£Â∏∏ÈÅãË°åËÄåË®≠Ë®àÁöÑÁ∑äÊÄ•ÂÇôÁî®ÊñπÊ°à„ÄÇ
"""

import os
import sys
import json
import time
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional

# Ë®≠ÁΩÆÂü∫Êú¨Êó•Ë™å
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SimpleStockRunner:
    """Á∞°ÂåñÁâàËÇ°Á•®ÈÅãË°åÂô®"""
    
    def __init__(self):
        self.start_time = datetime.now()
        self.notifier = None
        self._init_notifier()
        
        logger.info("üöÄ Á∞°ÂåñÁâàËÇ°Á•®ÂàÜÊûêÈÅãË°åÂô®ÂàùÂßãÂåñÂÆåÊàê")
    
    def _init_notifier(self):
        """ÂàùÂßãÂåñÈÄöÁü•Á≥ªÁµ±"""
        try:
            # Ê∑ªÂä†Áï∂ÂâçÁõÆÈåÑÂà∞PythonË∑ØÂæë
            if '.' not in sys.path:
                sys.path.insert(0, '.')
            
            import notifier
            self.notifier = notifier
            notifier.init()
            logger.info("‚úÖ ÈÄöÁü•Á≥ªÁµ±ÂàùÂßãÂåñÊàêÂäü")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è ÈÄöÁü•Á≥ªÁµ±ÂàùÂßãÂåñÂ§±Êïó: {e}")
            self.notifier = None
    
    def run_analysis(self, time_slot: str):
        """Âü∑Ë°åÁ∞°ÂåñÂàÜÊûê"""
        logger.info(f"üöÄ ÈñãÂßãÂü∑Ë°å {time_slot} Á∞°ÂåñÂàÜÊûê")
        
        try:
            # ÁîüÊàêÊ®°Êì¨ÂàÜÊûêÁµêÊûú
            analysis_result = self._generate_mock_analysis(time_slot)
            
            # ÁîüÊàêÊé®Ëñ¶
            recommendations = self._generate_recommendations(analysis_result, time_slot)
            
            # ÁôºÈÄÅÈÄöÁü•
            self._send_notification(recommendations, time_slot)
            
            # Ë®àÁÆóÂü∑Ë°åÊôÇÈñì
            execution_time = (datetime.now() - self.start_time).total_seconds()
            
            logger.info(f"‚úÖ {time_slot} Á∞°ÂåñÂàÜÊûêÂÆåÊàêÔºåËÄóÊôÇ {execution_time:.2f}s")
            logger.info(f"üìä Êé®Ëñ¶ÁµêÊûú: Áü≠Á∑ö{len(recommendations['short_term'])}ÊîØÔºåÈï∑Á∑ö{len(recommendations['long_term'])}ÊîØ")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Âü∑Ë°åÂàÜÊûêÊôÇÁôºÁîüÈåØË™§: {e}")
            
            # ÂòóË©¶ÁôºÈÄÅÈåØË™§ÈÄöÁü•
            self._send_error_notification(time_slot, str(e))
            return False
    
    def _generate_mock_analysis(self, time_slot: str) -> List[Dict[str, Any]]:
        """ÁîüÊàêÊ®°Êì¨ÂàÜÊûêÁµêÊûú"""
        import random
        random.seed(42)  # Âõ∫ÂÆöÁ®ÆÂ≠êÁ¢∫‰øù‰∏ÄËá¥ÊÄß
        
        # Âè∞ËÇ°Ââç20Â§ßÂ∏ÇÂÄºËÇ°Á•®
        major_stocks = [
            {'code': '2330', 'name': 'Âè∞Á©çÈõª', 'base_price': 638.5, 'weight': 1.0},
            {'code': '2317', 'name': 'È¥ªÊµ∑', 'base_price': 115.5, 'weight': 0.8},
            {'code': '2454', 'name': 'ËÅØÁôºÁßë', 'base_price': 825.0, 'weight': 0.9},
            {'code': '2412', 'name': '‰∏≠ËèØÈõª', 'base_price': 118.5, 'weight': 0.7},
            {'code': '2881', 'name': 'ÂØåÈÇ¶Èáë', 'base_price': 68.2, 'weight': 0.8},
            {'code': '2882', 'name': 'ÂúãÊ≥∞Èáë', 'base_price': 45.8, 'weight': 0.8},
            {'code': '2308', 'name': 'Âè∞ÈÅîÈõª', 'base_price': 362.5, 'weight': 0.9},
            {'code': '2609', 'name': 'ÈôΩÊòé', 'base_price': 91.2, 'weight': 0.6},
            {'code': '2615', 'name': 'Ëê¨Êµ∑', 'base_price': 132.8, 'weight': 0.6},
            {'code': '1301', 'name': 'Âè∞Â°ë', 'base_price': 95.8, 'weight': 0.7},
            {'code': '1303', 'name': 'Âçó‰∫û', 'base_price': 78.5, 'weight': 0.7},
            {'code': '2002', 'name': '‰∏≠Èãº', 'base_price': 25.8, 'weight': 0.6},
            {'code': '2303', 'name': 'ËÅØÈõª', 'base_price': 48.2, 'weight': 0.8},
            {'code': '3711', 'name': 'Êó•ÊúàÂÖâÊäïÊéß', 'base_price': 98.5, 'weight': 0.7},
            {'code': '2382', 'name': 'Âª£ÈÅî', 'base_price': 285.0, 'weight': 0.8}
        ]
        
        analysis_results = []
        
        for stock in major_stocks:
            # Ê®°Êì¨ÂÉπÊ†ºËÆäÂãï
            change_percent = random.uniform(-3.0, 4.0) * stock['weight']
            current_price = stock['base_price'] * (1 + change_percent / 100)
            
            # Ê®°Êì¨Êàê‰∫§Èáè
            base_volume = random.randint(5000000, 50000000)
            trade_value = int(current_price * base_volume)
            
            # Ë®àÁÆóË©ïÂàÜ
            score = self._calculate_mock_score(change_percent, trade_value, stock['weight'])
            
            # ÁîüÊàêÂàÜÊûêÁµêÊûú
            analysis = {
                'code': stock['code'],
                'name': stock['name'],
                'current_price': round(current_price, 2),
                'change_percent': round(change_percent, 2),
                'volume': base_volume,
                'trade_value': trade_value,
                'score': score,
                'weight': stock['weight'],
                'analysis_time': datetime.now().isoformat()
            }
            
            analysis_results.append(analysis)
        
        # ÊåâË©ïÂàÜÊéíÂ∫è
        analysis_results.sort(key=lambda x: x['score'], reverse=True)
        
        logger.info(f"ÁîüÊàê {len(analysis_results)} ÊîØËÇ°Á•®ÁöÑÊ®°Êì¨ÂàÜÊûêÁµêÊûú")
        return analysis_results
    
    def _calculate_mock_score(self, change_percent: float, trade_value: int, weight: float) -> float:
        """Ë®àÁÆóÊ®°Êì¨Ë©ïÂàÜ"""
        base_score = 50.0
        
        # ÂÉπÊ†ºËÆäÂãïÂΩ±Èüø
        if change_percent > 2:
            base_score += 15
        elif change_percent > 0:
            base_score += 10
        elif change_percent < -2:
            base_score -= 15
        elif change_percent < 0:
            base_score -= 5
        
        # Êàê‰∫§ÈáèÂΩ±Èüø
        if trade_value > 5000000000:  # 50ÂÑÑ‰ª•‰∏ä
            base_score += 10
        elif trade_value > 1000000000:  # 10ÂÑÑ‰ª•‰∏ä
            base_score += 5
        
        # Ê¨äÈáçË™øÊï¥
        base_score *= weight
        
        return max(0, min(100, round(base_score, 1)))
    
    def _generate_recommendations(self, analysis_results: List[Dict], time_slot: str) -> Dict[str, List]:
        """ÁîüÊàêÊé®Ëñ¶"""
        recommendations = {
            'short_term': [],
            'long_term': [],
            'weak_stocks': []
        }
        
        try:
            # ÊôÇÊÆµÈÖçÁΩÆ
            slot_config = {
                'morning_scan': {'short': 3, 'long': 2, 'weak': 2},
                'mid_morning_scan': {'short': 2, 'long': 3, 'weak': 1},
                'mid_day_scan': {'short': 2, 'long': 3, 'weak': 1},
                'afternoon_scan': {'short': 3, 'long': 3, 'weak': 2},
                'weekly_summary': {'short': 2, 'long': 5, 'weak': 1}
            }
            
            config = slot_config.get(time_slot, {'short': 3, 'long': 3, 'weak': 2})
            
            # Áü≠Á∑öÊé®Ëñ¶ - È´òÂàÜ‰∏îÊúâ‰∏äÊº≤ÂãïËÉΩ
            short_candidates = [
                stock for stock in analysis_results 
                if stock['score'] >= 65 and stock['change_percent'] > 0.5
            ]
            
            for stock in short_candidates[:config['short']]:
                recommendations['short_term'].append({
                    'code': stock['code'],
                    'name': stock['name'],
                    'current_price': stock['current_price'],
                    'reason': self._generate_short_reason(stock),
                    'target_price': round(stock['current_price'] * 1.06, 1),
                    'stop_loss': round(stock['current_price'] * 0.94, 1),
                    'trade_value': stock['trade_value'],
                    'analysis': stock
                })
            
            # Èï∑Á∑öÊé®Ëñ¶ - Á∂úÂêàË©ïÂàÜËâØÂ•Ω
            long_candidates = [
                stock for stock in analysis_results 
                if stock['score'] >= 55 and stock['weight'] >= 0.7
            ]
            
            for stock in long_candidates[:config['long']]:
                recommendations['long_term'].append({
                    'code': stock['code'],
                    'name': stock['name'],
                    'current_price': stock['current_price'],
                    'reason': self._generate_long_reason(stock),
                    'target_price': round(stock['current_price'] * 1.12, 1),
                    'stop_loss': round(stock['current_price'] * 0.88, 1),
                    'trade_value': stock['trade_value'],
                    'analysis': stock
                })
            
            # Âº±Âã¢ËÇ°Ë≠¶Á§∫
            weak_candidates = [
                stock for stock in analysis_results 
                if stock['score'] < 40 or stock['change_percent'] < -2.0
            ]
            
            for stock in weak_candidates[:config['weak']]:
                alert_reason = self._generate_alert_reason(stock)
                recommendations['weak_stocks'].append({
                    'code': stock['code'],
                    'name': stock['name'],
                    'current_price': stock['current_price'],
                    'alert_reason': alert_reason,
                    'trade_value': stock['trade_value'],
                    'analysis': stock
                })
            
            logger.info(f"Êé®Ëñ¶ÁîüÊàê: Áü≠Á∑ö{len(recommendations['short_term'])}ÊîØÔºåÈï∑Á∑ö{len(recommendations['long_term'])}ÊîØÔºåË≠¶Á§∫{len(recommendations['weak_stocks'])}ÊîØ")
            
        except Exception as e:
            logger.error(f"ÁîüÊàêÊé®Ëñ¶Â§±Êïó: {e}")
        
        return recommendations
    
    def _generate_short_reason(self, stock: Dict) -> str:
        """ÁîüÊàêÁü≠Á∑öÊé®Ëñ¶ÁêÜÁî±"""
        reasons = []
        
        if stock['score'] >= 80:
            reasons.append("Á∂úÂêàË©ïÂàÜÂÑ™Áï∞")
        elif stock['score'] >= 70:
            reasons.append("ÊäÄË°ìÈù¢Âº∑Âã¢")
        
        if stock['change_percent'] > 2:
            reasons.append(f"‰ªäÊó•Â§ßÊº≤{stock['change_percent']:.1f}%")
        elif stock['change_percent'] > 0:
            reasons.append(f"‰ªäÊó•‰∏äÊº≤{stock['change_percent']:.1f}%")
        
        if stock['trade_value'] > 5000000000:
            reasons.append("Êàê‰∫§ÈáèÊîæÂ§ß")
        
        return "Ôºå".join(reasons) if reasons else "ÊäÄË°ìÈù¢ËΩâÂº∑"
    
    def _generate_long_reason(self, stock: Dict) -> str:
        """ÁîüÊàêÈï∑Á∑öÊé®Ëñ¶ÁêÜÁî±"""
        reasons = []
        
        if stock['weight'] >= 0.9:
            reasons.append("ÈæçÈ†≠ËÇ°Âú∞‰ΩçÁ©©Âõ∫")
        elif stock['weight'] >= 0.8:
            reasons.append("Áî¢Ê•≠Âú∞‰ΩçËâØÂ•Ω")
        
        if stock['score'] >= 70:
            reasons.append("Âü∫Êú¨Èù¢Á©©ÂÅ•")
        
        # Ê†πÊìöËÇ°Á•®ÁâπÊÄßÊ∑ªÂä†ÁêÜÁî±
        if stock['code'] in ['2330', '2454']:
            reasons.append("ÁßëÊäÄËÇ°ÊàêÈï∑ÂãïËÉΩ")
        elif stock['code'] in ['2881', '2882']:
            reasons.append("ÈáëËûçËÇ°ÊÆñÂà©Áéá‰Ω≥")
        elif stock['code'] in ['2609', '2615']:
            reasons.append("Ëà™ÈÅãÂü∫Êú¨Èù¢ÊîπÂñÑ")
        
        return "Ôºå".join(reasons) if reasons else "ÈÅ©ÂêàÈï∑ÊúüÊäïË≥á"
    
    def _generate_alert_reason(self, stock: Dict) -> str:
        """ÁîüÊàêË≠¶Á§∫ÁêÜÁî±"""
        if stock['score'] < 35:
            return f"Á∂úÂêàË©ïÂàÜÂÅè‰Ωé({stock['score']:.1f})"
        elif stock['change_percent'] < -3:
            return f"‰ªäÊó•Â§ßË∑å{abs(stock['change_percent']):.1f}%"
        elif stock['change_percent'] < -1:
            return f"‰ªäÊó•‰∏ãË∑å{abs(stock['change_percent']):.1f}%ÔºåÈúÄÊ≥®ÊÑè"
        else:
            return "ÊäÄË°ìÈù¢ËΩâÂº±ÔºåË¨πÊÖéÊìç‰Ωú"
    
    def _send_notification(self, recommendations: Dict, time_slot: str):
        """ÁôºÈÄÅÈÄöÁü•"""
        try:
            if not self.notifier:
                logger.warning("ÈÄöÁü•Á≥ªÁµ±‰∏çÂèØÁî®ÔºåË∑≥ÈÅéÈÄöÁü•ÁôºÈÄÅ")
                return
            
            # ÁôºÈÄÅÊé®Ëñ¶ÈÄöÁü•
            self.notifier.send_combined_recommendations(recommendations, time_slot)
            logger.info("‚úÖ ÂàÜÊûêÈÄöÁü•Â∑≤ÁôºÈÄÅ")
            
        except Exception as e:
            logger.error(f"‚ùå ÁôºÈÄÅÈÄöÁü•Â§±Êïó: {e}")
    
    def _send_error_notification(self, time_slot: str, error_msg: str):
        """ÁôºÈÄÅÈåØË™§ÈÄöÁü•"""
        try:
            if not self.notifier:
                return
            
            error_notification = f"""üö® Á∞°ÂåñÁâàËÇ°Á•®ÂàÜÊûêÂü∑Ë°åÂ§±Êïó

‚è∞ ÂàÜÊûêÊôÇÊÆµ: {time_slot}
‚ùå ÈåØË™§Ë®äÊÅØ: {error_msg}
üïê Â§±ÊïóÊôÇÈñì: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üìã Á≥ªÁµ±ÁãÄÊÖã:
‚Ä¢ ÈÅãË°åÊ®°Âºè: Á∞°ÂåñÁâà (‰∏ç‰æùË≥¥ aiohttp)
‚Ä¢ GitHub Actions: Áí∞Â¢ÉÂÖºÂÆπÊ®°Âºè
‚Ä¢ ÈåØË™§ËôïÁêÜ: Â∑≤ÂïüÁî®

üîß Âª∫Ë≠∞Ê™¢Êü•:
1. Á∂≤Ë∑ØÈÄ£Á∑öÁãÄÊ≥Å
2. Áí∞Â¢ÉËÆäÊï∏Ë®≠ÂÆö
3. ÈÄöÁü•Á≥ªÁµ±ÈÖçÁΩÆ

Á≥ªÁµ±Â∞áÂú®‰∏ãÊ¨°ÊéíÁ®ãÊôÇÈñìËá™ÂãïÈáçË©¶„ÄÇ"""
            
            self.notifier.send_notification(error_notification, f"üö® {time_slot} ÂàÜÊûêÂ§±ÊïóÈÄöÁü•", urgent=True)
            logger.info("‚ùå ÈåØË™§ÈÄöÁü•Â∑≤ÁôºÈÄÅ")
            
        except Exception as e:
            logger.error(f"ÁôºÈÄÅÈåØË™§ÈÄöÁü•Â§±Êïó: {e}")

def main():
    """‰∏ªÂáΩÊï∏"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Á∞°ÂåñÁâàËÇ°Á•®ÂàÜÊûêÈÅãË°åÂô®')
    parser.add_argument('time_slot', 
                       choices=['morning_scan', 'mid_morning_scan', 'mid_day_scan', 'afternoon_scan', 'weekly_summary'],
                       help='ÂàÜÊûêÊôÇÊÆµ')
    parser.add_argument('--test', action='store_true', help='Ê∏¨Ë©¶Ê®°Âºè')
    
    args = parser.parse_args()
    
    print("üöÄ Á∞°ÂåñÁâàËÇ°Á•®ÂàÜÊûêÈÅãË°åÂô®")
    print("=" * 50)
    print(f"üìÖ ÂàÜÊûêÊôÇÊÆµ: {args.time_slot}")
    print(f"üß™ Ê∏¨Ë©¶Ê®°Âºè: {'ÊòØ' if args.test else 'Âê¶'}")
    print(f"üïê ÂïüÂãïÊôÇÈñì: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    try:
        runner = SimpleStockRunner()
        
        if args.test:
            # Ê∏¨Ë©¶Ê®°Âºè
            print("üß™ Âü∑Ë°åÁ≥ªÁµ±Ê∏¨Ë©¶...")
            
            # Ê∏¨Ë©¶ÈÄöÁü•Á≥ªÁµ±
            if runner.notifier:
                print("‚úÖ ÈÄöÁü•Á≥ªÁµ±: ÂèØÁî®")
            else:
                print("‚ö†Ô∏è ÈÄöÁü•Á≥ªÁµ±: ‰∏çÂèØÁî®")
            
            # Ê∏¨Ë©¶ÂàÜÊûêÂäüËÉΩ
            test_analysis = runner._generate_mock_analysis('test')
            print(f"‚úÖ ÂàÜÊûêÂäüËÉΩ: ÊàêÂäüÁîüÊàê {len(test_analysis)} ÊîØËÇ°Á•®ÂàÜÊûê")
            
            # Ê∏¨Ë©¶Êé®Ëñ¶ÂäüËÉΩ
            test_recommendations = runner._generate_recommendations(test_analysis, 'test')
            total_recs = sum(len(recs) for recs in test_recommendations.values())
            print(f"‚úÖ Êé®Ëñ¶ÂäüËÉΩ: ÊàêÂäüÁîüÊàê {total_recs} È†ÖÊé®Ëñ¶")
            
            print("\nüéâ ÊâÄÊúâÊ∏¨Ë©¶ÈÄöÈÅéÔºÅ")
        else:
            # Ê≠£Â∏∏Âü∑Ë°å
            success = runner.run_analysis(args.time_slot)
            
            if success:
                print(f"\nüéâ {args.time_slot} ÂàÜÊûêÂü∑Ë°åÊàêÂäüÔºÅ")
                print("üìß Ë´ãÊ™¢Êü•ÊÇ®ÁöÑÈÄöÁü•Êé•Êî∂Á´Ø")
            else:
                print(f"\n‚ùå {args.time_slot} ÂàÜÊûêÂü∑Ë°åÂ§±Êïó")
                sys.exit(1)
        
    except KeyboardInterrupt:
        print("\n\nüëã Áî®Êà∂‰∏≠Êñ∑ÔºåÁ®ãÂºèÁµêÊùü")
    except Exception as e:
        print(f"\n‚ùå Á®ãÂºèÂü∑Ë°åÂ§±Êïó: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
