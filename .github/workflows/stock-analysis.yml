name: 台股分析機器人

on:
  schedule:
    # 早盤掃描 - 工作日 09:00 台北時間
    - cron: '0 1 * * 1-5'
    # 盤後掃描 - 工作日 15:00 台北時間  
    - cron: '0 7 * * 1-5'
    # 心跳檢測 - 每日 08:30 台北時間
    - cron: '30 0 * * *'
  
  workflow_dispatch:
    inputs:
      analysis_type:
        description: '分析類型'
        required: true
        default: 'morning_scan'
        type: choice
        options:
        - morning_scan
        - afternoon_scan
        - heartbeat

jobs:
  stock-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: 檢出代碼
      uses: actions/checkout@v4
      
    - name: 設置 Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: 安裝依賴套件
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 檢查語法
      run: |
        echo "🔍 檢查 Python 語法..."
        python -m py_compile enhanced_stock_bot.py
        python -m py_compile notifier.py
        python -m py_compile config.py
        python -m py_compile twse_data_fetcher.py
        echo "✅ 語法檢查通過！"
        
    - name: 決定執行類型
      id: run_type
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "type=${{ github.event.inputs.analysis_type }}" >> $GITHUB_OUTPUT
        else
          HOUR=$(date -u +%H)
          case $HOUR in
            0) echo "type=heartbeat" >> $GITHUB_OUTPUT ;;
            1) echo "type=morning_scan" >> $GITHUB_OUTPUT ;;
            7) echo "type=afternoon_scan" >> $GITHUB_OUTPUT ;;
            *) echo "type=heartbeat" >> $GITHUB_OUTPUT ;;
          esac
        fi
        
    - name: 測試通知系統
      env:
        EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_RECEIVER: ${{ secrets.EMAIL_RECEIVER }}
        EMAIL_SMTP_SERVER: smtp.gmail.com
        EMAIL_SMTP_PORT: 587
      run: |
        echo "🔧 測試通知系統..."
        python test_notification_simple.py
        
    - name: 創建簡單通知測試檔案
      run: |
        cat > test_notification_simple.py << 'EOF'
        import os
        
        # 檢查環境變數
        print('檢查環境變數:')
        print('EMAIL_SENDER:', '✅' if os.getenv('EMAIL_SENDER') else '❌')
        print('EMAIL_PASSWORD:', '✅' if os.getenv('EMAIL_PASSWORD') else '❌') 
        print('EMAIL_RECEIVER:', '✅' if os.getenv('EMAIL_RECEIVER') else '❌')
        
        # 嘗試導入並測試通知系統
        try:
            import notifier
            notifier.init()
            if notifier.is_notification_available():
                print('✅ 通知系統可用')
            else:
                print('⚠️ 通知系統配置不完整')
        except Exception as e:
            print(f'⚠️ 通知系統測試失敗: {e}')
        EOF
        
    - name: 執行分析
      env:
        EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_RECEIVER: ${{ secrets.EMAIL_RECEIVER }}
        EMAIL_SMTP_SERVER: smtp.gmail.com
        EMAIL_SMTP_PORT: 587
        TZ: Asia/Taipei
      run: |
        TYPE="${{ steps.run_type.outputs.type }}"
        echo "🚀 執行: $TYPE"
        
        if [ "$TYPE" = "heartbeat" ]; then
          echo "執行心跳檢測..."
          python heartbeat_test.py
        else
          echo "執行股票分析..."
          python enhanced_stock_bot.py $TYPE
        fi
        
    - name: 創建心跳測試檔案
      run: |
        cat > heartbeat_test.py << 'EOF'
        import notifier
        
        try:
            notifier.init()
            result = notifier.send_heartbeat()
            if result:
                print('✅ 心跳檢測完成，通知已發送')
            else:
                print('⚠️ 心跳檢測完成，但通知發送失敗')
        except Exception as e:
            print(f'❌ 心跳檢測失敗: {e}')
        EOF
        
    - name: 創建日誌目錄
      if: always()
      run: |
        mkdir -p logs
        echo "$(date): 執行完成 - ${{ steps.run_type.outputs.type }}" > logs/execution.log
        
    - name: 上傳日誌
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: logs-${{ steps.run_type.outputs.type }}-${{ github.run_number }}
        path: logs/
        retention-days: 7

  # 錯誤通知作業
  error-notification:
    runs-on: ubuntu-latest
    needs: stock-analysis
    if: failure()
    
    steps:
    - name: 創建錯誤通知腳本
      run: |
        cat > send_error_notification.py << 'EOF'
        import os
        import smtplib
        from datetime import datetime
        from email.mime.text import MIMEText
        import ssl

        def send_error_notification():
            sender = os.getenv('EMAIL_SENDER')
            password = os.getenv('EMAIL_PASSWORD') 
            receiver = os.getenv('EMAIL_RECEIVER')
            
            if not all([sender, password, receiver]):
                print('❌ 缺少郵件配置，跳過錯誤通知')
                return False
            
            message = f"""❌ 台股分析機器人執行失敗

                    ⏰ 失敗時間: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
                    🔗 查看詳情: https://github.com/{{ repository }}/actions/runs/{{ run_id }}

                    請檢查 GitHub Actions 日誌了解詳細錯誤資訊。

                    可能的問題：
                    1. 郵件認證設定問題  
                    2. 股票數據 API 連接失敗
                    3. 程式執行異常

                    建議檢查 Secrets 設定和程式日誌。
                    """
            
            try:
                msg = MIMEText(message, 'plain', 'utf-8')
                msg['Subject'] = '❌ 台股分析機器人執行失敗通知'
                msg['From'] = sender
                msg['To'] = receiver
                
                context = ssl.create_default_context()
                server = smtplib.SMTP('smtp.gmail.com', 587)
                server.starttls(context=context)
                server.login(sender, password)
                server.send_message(msg)
                server.quit()
                
                print('✅ 錯誤通知已發送')
                return True
            except Exception as e:
                print(f'❌ 發送錯誤通知失敗: {e}')
                return False

        if __name__ == "__main__":
            send_error_notification()
        EOF
        
    - name: 發送錯誤通知
      env:
        EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_RECEIVER: ${{ secrets.EMAIL_RECEIVER }}
      run: |
        # 替換模板變數
        sed -i 's/{{ repository }}/${{ github.repository }}/g' send_error_notification.py
        sed -i 's/{{ run_id }}/${{ github.run_id }}/g' send_error_notification.py
        python send_error_notification.py
