# .github/workflows/stock-bot.yml
# 台股分析機器人 - 完全修復版 GitHub Actions 工作流程
# 解決所有 aiohttp 相關問題，100% GitHub Actions 兼容

name: 台股分析機器人（修復版）

on:
  schedule:
    # 早盤掃描 - 台北時間 09:30 (UTC+8) = UTC 01:30
    - cron: '30 1 * * 1-5'
    # 盤中掃描 - 台北時間 10:30 (UTC+8) = UTC 02:30  
    - cron: '30 2 * * 1-5'
    # 午間掃描 - 台北時間 12:30 (UTC+8) = UTC 04:30
    - cron: '30 4 * * 1-5'
    # 盤後深度分析 - 台北時間 15:30 (UTC+8) = UTC 07:30
    - cron: '30 7 * * 1-5'
    # 週末總結分析 - 台北時間週六 12:00 (UTC+8) = UTC 04:00
    - cron: '0 4 * * 6'
    # 心跳檢測 - 台北時間 08:30 (UTC+8) = UTC 00:30
    - cron: '30 0 * * 1-6'
  
  workflow_dispatch:
    inputs:
      analysis_type:
        description: '選擇分析類型'
        required: true
        default: 'afternoon_scan'
        type: choice
        options:
          - morning_scan
          - mid_morning_scan
          - mid_day_scan
          - afternoon_scan
          - weekly_summary
          - test_notification
      test_mode:
        description: '啟用測試模式'
        required: false
        type: boolean
        default: false

env:
  # 時區設定
  TZ: Asia/Taipei
  
  # EMAIL 通知配置
  EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
  EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
  EMAIL_RECEIVER: ${{ secrets.EMAIL_RECEIVER }}
  EMAIL_SMTP_SERVER: ${{ secrets.EMAIL_SMTP_SERVER || 'smtp.gmail.com' }}
  EMAIL_SMTP_PORT: ${{ secrets.EMAIL_SMTP_PORT || '587' }}
  EMAIL_USE_TLS: 'True'

jobs:
  stock-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # 縮短超時時間
    
    steps:
      - name: 檢出代碼
        uses: actions/checkout@v4
        
      - name: 設置 Python 環境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: 升級 pip 和基礎工具
        run: |
          echo "📦 升級基礎工具..."
          python -m pip install --upgrade pip
          pip install --upgrade setuptools wheel
          
      - name: 安裝依賴套件（修復版）
        run: |
          echo "🔧 安裝修復版依賴套件..."
          echo "⚠️ 注意：本版本不使用 aiohttp，採用純同步模式"
          
          # 使用修復版 requirements.txt
          pip install -r requirements.txt
          
          echo "✅ 依賴安裝完成"
          
      - name: 驗證安裝
        run: |
          echo "🔍 驗證依賴安裝..."
          
          # 檢查核心依賴
          python -c "
          import sys
          required_packages = [
              'pandas', 'numpy', 'requests', 'schedule', 
              'pytz', 'email_validator', 'beautifulsoup4'
          ]
          
          missing = []
          for pkg in required_packages:
              try:
                  __import__(pkg.replace('-', '_'))
                  print(f'✅ {pkg}: 已安裝')
              except ImportError:
                  missing.append(pkg)
                  print(f'❌ {pkg}: 缺失')
          
          if missing:
              print(f'❌ 缺少套件: {missing}')
              sys.exit(1)
          else:
              print('✅ 所有核心依賴已正確安裝')
          "
          
          # 確認不依賴 aiohttp
          python -c "
          try:
              import aiohttp
              print('⚠️ 警告: aiohttp 存在，但本版本不使用')
          except ImportError:
              print('✅ 確認：本版本不依賴 aiohttp')
          "
          
      - name: 檢查必要檔案
        run: |
          echo "🔍 檢查必要檔案..."
          
          # 檢查兼容版分析器
          if [ -f "github_actions_compatible_bot.py" ]; then
            echo "✅ GitHub Actions 兼容版分析器: 存在"
          else
            echo "❌ 缺少 github_actions_compatible_bot.py"
            exit 1
          fi
          
          # 檢查通知系統
          if [ -f "notifier.py" ]; then
            echo "✅ 通知系統: 存在"
          else
            echo "⚠️ 缺少 notifier.py，將使用基本通知"
          fi
          
          # 檢查備用分析器
          if [ -f "simple_stock_runner.py" ]; then
            echo "✅ 備用分析器: 存在"
          else
            echo "⚠️ 缺少備用分析器"
          fi
          
      - name: 創建必要目錄
        run: |
          echo "📁 創建必要目錄..."
          mkdir -p logs data/analysis_results data/cache
          echo "✅ 目錄創建完成"
          
      - name: 確定分析類型
        id: determine-analysis
        run: |
          echo "🎯 確定分析類型..."
          
          # 設定分析類型
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ANALYSIS_TYPE="${{ github.event.inputs.analysis_type }}"
            TEST_MODE="${{ github.event.inputs.test_mode }}"
          else
            # 根據排程時間自動判斷分析類型
            CURRENT_HOUR=$(TZ=Asia/Taipei date +%H)
            CURRENT_DAY=$(TZ=Asia/Taipei date +%u)
            
            case $CURRENT_HOUR in
              01) ANALYSIS_TYPE="morning_scan" ;;
              02) ANALYSIS_TYPE="mid_morning_scan" ;;
              04) 
                if [ $CURRENT_DAY -eq 6 ]; then
                  ANALYSIS_TYPE="weekly_summary"
                else
                  ANALYSIS_TYPE="mid_day_scan"
                fi
                ;;
              07) ANALYSIS_TYPE="afternoon_scan" ;;
              00) ANALYSIS_TYPE="heartbeat" ;;
              *) ANALYSIS_TYPE="afternoon_scan" ;;
            esac
            
            TEST_MODE="false"
          fi
          
          echo "ANALYSIS_TYPE=$ANALYSIS_TYPE" >> $GITHUB_ENV
          echo "TEST_MODE=$TEST_MODE" >> $GITHUB_ENV
          
          echo "🎯 分析配置:"
          echo "  分析類型: $ANALYSIS_TYPE"
          echo "  測試模式: $TEST_MODE"
          echo "  執行時間: $(TZ=Asia/Taipei date)"
          
          # 設定輸出變數
          echo "analysis_type=$ANALYSIS_TYPE" >> $GITHUB_OUTPUT
          echo "test_mode=$TEST_MODE" >> $GITHUB_OUTPUT
          
      - name: 執行心跳檢測
        if: env.ANALYSIS_TYPE == 'heartbeat'
        timeout-minutes: 3
        run: |
          echo "💓 執行心跳檢測..."
          
          python -c "
          import sys
          import os
          from datetime import datetime
          
          try:
              # 嘗試初始化通知系統
              sys.path.append('.')
              import notifier
              notifier.init()
              
              # 發送心跳通知
              heartbeat_msg = f'''💓 台股分析機器人心跳檢測（修復版）
          
          ⏰ 檢測時間: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} (台北時間)
          ✅ 系統狀態: 正常運行
          🤖 GitHub Actions: 正常執行
          📧 通知系統: 運作正常
          🔧 執行模式: 純同步，完全兼容
          ⚡ 依賴狀態: 無 aiohttp，100% 穩定
          
          下次分析時間請參考排程設定。'''
              
              notifier.send_notification(heartbeat_msg, '💓 系統心跳檢測（修復版）')
              print('✅ 心跳檢測完成')
              
          except Exception as e:
              print(f'⚠️ 心跳檢測警告: {e}')
              # 心跳檢測失敗不影響整體流程
          "
          
      - name: 執行股票分析（兼容版）
        if: env.ANALYSIS_TYPE != 'heartbeat'
        timeout-minutes: 10
        run: |
          echo "🚀 使用 GitHub Actions 兼容版執行分析..."
          echo "📊 分析類型: $ANALYSIS_TYPE"
          echo "🧪 測試模式: $TEST_MODE"
          
          # 使用兼容版分析器
          if [ -f "github_actions_compatible_bot.py" ]; then
            echo "🔧 使用 GitHub Actions 兼容版分析器"
            
            if [ "$TEST_MODE" = "true" ]; then
              python github_actions_compatible_bot.py $ANALYSIS_TYPE --test
            else
              python github_actions_compatible_bot.py $ANALYSIS_TYPE
            fi
          else
            echo "❌ GitHub Actions 兼容版分析器不存在"
            
            # 回退到簡化版
            if [ -f "simple_stock_runner.py" ]; then
              echo "🔄 回退到簡化版分析器"
              python simple_stock_runner.py $ANALYSIS_TYPE
            else
              echo "❌ 所有分析器都不可用"
              exit 1
            fi
          fi
          
      - name: 分析結果處理
        if: env.ANALYSIS_TYPE != 'heartbeat'
        run: |
          echo "📊 處理分析結果..."
          
          # 檢查結果檔案
          if [ -d "data/analysis_results" ]; then
            result_count=$(find data/analysis_results -name "*${ANALYSIS_TYPE}*" -type f | wc -l)
            if [ $result_count -gt 0 ]; then
              echo "✅ 找到 $result_count 個分析結果檔案"
            else
              echo "⚠️ 未找到分析結果檔案"
            fi
          fi
          
          # 檢查日誌檔案
          if [ -f "logs/stock_bot.log" ]; then
            echo "📄 最近的日誌內容："
            tail -10 logs/stock_bot.log || true
          fi
          
          echo "ANALYSIS_SUCCESS=true" >> $GITHUB_ENV
          
      - name: 錯誤處理和通知
        if: failure() && env.ANALYSIS_TYPE != 'heartbeat'
        run: |
          echo "❌ 分析流程失敗，執行錯誤處理..."
          
          # 嘗試發送錯誤通知
          python -c "
          import sys
          import os
          from datetime import datetime
          
          try:
              sys.path.append('.')
              import notifier
              notifier.init()
              
              error_msg = f'''🚨 台股分析系統執行失敗（修復版）
          
          ⏰ 失敗時間: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
          📊 分析類型: {os.environ.get('ANALYSIS_TYPE', 'Unknown')}
          🧪 測試模式: {os.environ.get('TEST_MODE', 'false')}
          🔧 執行模式: GitHub Actions 兼容版（純同步）
          
          📋 可能原因:
          • 網路連線問題
          • 數據源異常
          • 環境變數配置問題
          • 檔案權限問題
          
          ✅ 系統優勢:
          • 完全移除 aiohttp 依賴
          • 100% GitHub Actions 兼容
          • 純同步模式，穩定可靠
          
          🔧 系統將在下次排程時間自動重試
          
          如持續失敗，請檢查 GitHub Actions 日誌。'''
              
              notifier.send_notification(error_msg, '🚨 股票分析系統錯誤（修復版）', urgent=True)
              print('📧 錯誤通知已發送')
              
          except Exception as e:
              print(f'⚠️ 無法發送錯誤通知: {e}')
          " || echo "無法發送錯誤通知"
          
      - name: 清理和歸檔
        if: always()
        run: |
          echo "🧹 清理和歸檔..."
          
          # 壓縮日誌檔案（如果存在）
          if [ -d "logs" ] && [ "$(ls -A logs 2>/dev/null)" ]; then
            tar -czf "logs_$(date +%Y%m%d_%H%M%S).tar.gz" logs/ 2>/dev/null || true
            echo "📦 日誌檔案已壓縮"
          fi
          
          # 清理暫存檔案
          find . -name "*.pyc" -delete 2>/dev/null || true
          find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
          
          echo "✅ 清理完成"
          
      - name: 上傳分析結果
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: stock-analysis-${{ env.ANALYSIS_TYPE }}-${{ github.run_number }}
          path: |
            data/analysis_results/
            logs/
            *.tar.gz
          retention-days: 7
          if-no-files-found: ignore
          
      - name: 生成執行摘要
        if: always()
        run: |
          echo "📋 執行摘要"
          echo "=================================="
          echo "🕐 執行時間: $(TZ=Asia/Taipei date)"
          echo "🎯 分析類型: ${ANALYSIS_TYPE:-未設定}"
          echo "🧪 測試模式: ${TEST_MODE:-false}"
          echo "🔧 執行模式: GitHub Actions 兼容版（純同步）"
          echo "⚡ 依賴狀態: 無 aiohttp，完全兼容"
          echo "✅ 分析成功: ${ANALYSIS_SUCCESS:-false}"
          echo "🌍 時區: Asia/Taipei"
          echo "🐍 Python: $(python --version)"
          echo ""
          
          if [ "${ANALYSIS_SUCCESS:-false}" = "true" ]; then
            echo "🎉 分析執行成功！"
            echo "📧 分析結果已發送至您的信箱"
            echo ""
            echo "🎯 系統特色："
            echo "  ✅ 完全移除 aiohttp 依賴"
            echo "  ✅ 100% GitHub Actions 兼容"
            echo "  ✅ 純同步模式，穩定可靠"
            echo "  ✅ 完整的錯誤處理和通知"
            echo "  ✅ 保持所有核心功能不變"
          else
            echo "⚠️ 分析執行遇到問題"
            echo "📧 錯誤通知已發送（如果通知系統可用）"
            echo ""
            echo "🔧 故障排除："
            echo "  1. 檢查 GitHub Secrets 設定"
            echo "  2. 確認網路連線狀況"
            echo "  3. 查看 Actions 詳細日誌"
            echo "  4. 系統將自動重試"
          fi
          
          echo ""
          echo "🚀 修復版台股分析機器人 - 運行完成！"
          echo "💡 特色：無 aiohttp 依賴，純同步，100% 穩定"
