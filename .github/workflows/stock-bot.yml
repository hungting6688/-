# .github/workflows/taiwan_stock_auto_push.yml
# 台股分析系統自動推播工作流程
# 支援多時段分析、EMAIL/LINE推播、心跳檢測

name: 🇹🇼 台股自動分析推播系統

on:
  # 定時觸發 (使用 UTC 時間，台灣時間需 -8 小時)
  schedule:
    # 心跳檢測: 每日 00:30 UTC (台灣時間 08:30)
    - cron: '30 0 * * 1-5'
    # 早盤掃描: 每日 01:30 UTC (台灣時間 09:30)
    - cron: '30 1 * * 1-5'
    # 盤中掃描: 每日 02:30 UTC (台灣時間 10:30)
    - cron: '30 2 * * 1-5'
    # 午間掃描: 每日 04:30 UTC (台灣時間 12:30)
    - cron: '30 4 * * 1-5'
    # 盤後掃描: 每日 07:00 UTC (台灣時間 15:00)
    - cron: '0 7 * * 1-5'
    # 週末總結: 週六 04:00 UTC (台灣時間週六 12:00)
    - cron: '0 4 * * 6'
  
  # 手動觸發
  workflow_dispatch:
    inputs:
      analysis_mode:
        description: '分析模式'
        required: true
        default: 'optimized'
        type: choice
        options:
        - basic
        - enhanced
        - optimized
      time_slot:
        description: '分析時段'
        required: true
        default: 'afternoon_scan'
        type: choice
        options:
        - morning_scan
        - mid_morning_scan
        - mid_day_scan
        - afternoon_scan
        - weekly_summary
        - heartbeat
      force_notification:
        description: '強制發送通知'
        required: false
        default: true
        type: boolean

# 環境變數
env:
  PYTHONPATH: ${{ github.workspace }}
  TZ: Asia/Taipei

jobs:
  # 系統狀態檢查
  system_check:
    name: 🔍 系統狀態檢查
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      analysis_mode: ${{ steps.check.outputs.analysis_mode }}
      time_slot: ${{ steps.check.outputs.time_slot }}
    
    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4
    
    - name: 🐍 設置 Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 📦 安裝依賴
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🔍 系統檢查
      id: check
      run: |
        python << 'EOF'
        import os
        from datetime import datetime
        import pytz
        
        # 獲取台灣時間
        taiwan_tz = pytz.timezone('Asia/Taipei')
        now = datetime.now(taiwan_tz)
        hour = now.hour
        weekday = now.weekday()  # 0=Monday, 6=Sunday
        
        # 判斷時段和模式
        if "${{ github.event_name }}" == "workflow_dispatch":
            time_slot = "${{ github.event.inputs.time_slot }}"
            analysis_mode = "${{ github.event.inputs.analysis_mode }}"
            should_run = "true"
        else:
            # 根據當前時間自動判斷
            if hour == 8 and 30 <= now.minute < 45:
                time_slot = "heartbeat"
                analysis_mode = "basic"
            elif hour == 9 and 30 <= now.minute < 45:
                time_slot = "morning_scan"
                analysis_mode = "optimized"
            elif hour == 10 and 30 <= now.minute < 45:
                time_slot = "mid_morning_scan"
                analysis_mode = "enhanced"
            elif hour == 12 and 30 <= now.minute < 45:
                time_slot = "mid_day_scan"
                analysis_mode = "optimized"
            elif hour == 15 and 0 <= now.minute < 15:
                time_slot = "afternoon_scan"
                analysis_mode = "optimized"
            elif weekday == 5 and hour == 12 and 0 <= now.minute < 15:  # 週六
                time_slot = "weekly_summary"
                analysis_mode = "optimized"
            else:
                time_slot = "skip"
                analysis_mode = "basic"
            
            should_run = "true" if time_slot != "skip" else "false"
        
        print(f"::set-output name=should_run::{should_run}")
        print(f"::set-output name=analysis_mode::{analysis_mode}")
        print(f"::set-output name=time_slot::{time_slot}")
        
        print(f"🕐 台灣時間: {now.strftime('%Y-%m-%d %H:%M:%S %A')}")
        print(f"📊 分析模式: {analysis_mode}")
        print(f"⏰ 時段: {time_slot}")
        print(f"🚀 是否執行: {should_run}")
        EOF

  # 心跳檢測任務
  heartbeat:
    name: 💓 系統心跳檢測
    runs-on: ubuntu-latest
    needs: system_check
    if: needs.system_check.outputs.should_run == 'true' && needs.system_check.outputs.time_slot == 'heartbeat'
    
    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4
    
    - name: 🐍 設置 Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 📦 安裝依賴
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 💓 執行心跳檢測
      env:
        EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_RECEIVER: ${{ secrets.EMAIL_RECEIVER }}
        EMAIL_SMTP_SERVER: ${{ secrets.EMAIL_SMTP_SERVER }}
        EMAIL_SMTP_PORT: ${{ secrets.EMAIL_SMTP_PORT }}
        LINE_ENABLED: ${{ secrets.LINE_ENABLED }}
        LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
        LINE_USER_ID: ${{ secrets.LINE_USER_ID }}
        LINE_GROUP_ID: ${{ secrets.LINE_GROUP_ID }}
      run: |
        python heartbeat_check.py

  # 主要股票分析任務
  stock_analysis:
    name: 📊 股票分析推播
    runs-on: ubuntu-latest
    needs: system_check
    if: needs.system_check.outputs.should_run == 'true' && needs.system_check.outputs.time_slot != 'heartbeat'
    
    strategy:
      fail-fast: false
      matrix:
        # 使用矩陣策略來支援不同的分析模式
        include:
          - mode: ${{ needs.system_check.outputs.analysis_mode }}
            slot: ${{ needs.system_check.outputs.time_slot }}
    
    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4
    
    - name: 🐍 設置 Python 環境
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: requirements.txt
    
    - name: 📦 安裝 Python 依賴
      run: |
        pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        
        # 檢查關鍵套件
        python -c "import pandas; print('✅ pandas installed')"
        python -c "import requests; print('✅ requests installed')"
        python -c "import pytz; print('✅ pytz installed')"
    
    - name: 📁 創建必要目錄
      run: |
        mkdir -p logs
        mkdir -p logs/notifications
        mkdir -p cache
        mkdir -p data
        mkdir -p data/analysis_results
        echo "✅ 目錄結構已創建"
    
    - name: 🔧 語法檢查
      run: |
        echo "🔍 檢查關鍵文件語法..."
        python syntax_check.py
    
    - name: 🧪 系統測試
      run: |
        echo "🧪 執行系統測試..."
        python -c "
        try:
            from integrated_stock_bot import IntegratedStockBot
            bot = IntegratedStockBot('${{ matrix.mode }}')
            print('✅ 整合系統初始化成功')
        except Exception as e:
            print(f'⚠️ 系統測試警告: {e}')
        "
    
    - name: 📊 執行股票分析
      env:
        # 郵件配置
        EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_RECEIVER: ${{ secrets.EMAIL_RECEIVER }}
        EMAIL_SMTP_SERVER: ${{ secrets.EMAIL_SMTP_SERVER || 'smtp.gmail.com' }}
        EMAIL_SMTP_PORT: ${{ secrets.EMAIL_SMTP_PORT || '587' }}
        EMAIL_USE_TLS: ${{ secrets.EMAIL_USE_TLS || 'True' }}
        
        # LINE 配置
        LINE_ENABLED: ${{ secrets.LINE_ENABLED || 'True' }}
        LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
        LINE_USER_ID: ${{ secrets.LINE_USER_ID }}
        LINE_GROUP_ID: ${{ secrets.LINE_GROUP_ID }}
        
        # 其他配置
        MARKET_ENVIRONMENT: ${{ secrets.MARKET_ENVIRONMENT || 'neutral' }}
        CURRENT_SEASON: ${{ secrets.CURRENT_SEASON || 'normal' }}
        STOCK_DATA_SOURCE: 'twse'
        
        # GitHub Actions 標記
        GITHUB_ACTIONS: 'true'
        CI: 'true'
      
      run: |
        echo "🚀 開始執行 ${{ matrix.mode }} 模式的 ${{ matrix.slot }} 分析..."
        
        # 記錄開始時間
        echo "開始時間: $(date '+%Y-%m-%d %H:%M:%S')"
        
        # 執行分析
        timeout 1800 python integrated_stock_bot.py run \
          --mode ${{ matrix.mode }} \
          --slot ${{ matrix.slot }} || {
          
          echo "⚠️ 主要分析程序執行異常，嘗試備用方案..."
          
          # 備用方案1: 使用優化版機器人
          if [ -f "enhanced_stock_bot.py" ]; then
            echo "🔄 嘗試使用優化版機器人..."
            timeout 900 python enhanced_stock_bot.py ${{ matrix.slot }} || {
              echo "❌ 優化版機器人也失敗了"
            }
          fi
          
          # 備用方案2: 發送錯誤通知
          echo "📧 發送錯誤通知..."
          python -c "
          try:
              import notifier
              notifier.init()
              error_msg = '''❌ 台股分析系統執行失敗
              
時間: $(date '+%Y-%m-%d %H:%M:%S')
模式: ${{ matrix.mode }}
時段: ${{ matrix.slot }}
錯誤: 分析程序執行超時或異常

請檢查系統狀態，可能需要手動介入。'''
              notifier.send_notification(error_msg, '❌ 系統執行失敗通知')
          except Exception as e:
              print(f'通知發送失敗: {e}')
          "
        }
        
        echo "✅ 分析完成時間: $(date '+%Y-%m-%d %H:%M:%S')"
    
    - name: 📊 結果驗證
      run: |
        echo "📊 驗證分析結果..."
        
        # 檢查日誌文件
        if [ -f "logs/stock_bot.log" ]; then
          echo "✅ 日誌文件存在"
          tail -10 logs/stock_bot.log
        else
          echo "⚠️ 未找到日誌文件"
        fi
        
        # 檢查分析結果文件
        TODAY=$(date '+%Y%m%d')
        RESULT_DIR="data/analysis_results/$TODAY"
        
        if [ -d "$RESULT_DIR" ]; then
          echo "✅ 分析結果目錄存在: $RESULT_DIR"
          ls -la "$RESULT_DIR"
        else
          echo "⚠️ 未找到分析結果目錄"
        fi
        
        # 檢查通知備份
        if [ -d "logs/notifications" ]; then
          echo "📧 通知備份目錄:"
          ls -la logs/notifications/ | tail -5
        fi
    
    - name: 📤 上傳執行結果
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: analysis-results-${{ matrix.mode }}-${{ matrix.slot }}-${{ github.run_number }}
        path: |
          logs/
          data/analysis_results/
        retention-days: 7

  # 狀態報告任務
  status_report:
    name: 📋 執行狀態報告
    runs-on: ubuntu-latest
    needs: [system_check, heartbeat, stock_analysis]
    if: always() && needs.system_check.outputs.should_run == 'true'
    
    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4
    
    - name: 🐍 設置 Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📦 安裝依賴
      run: |
        pip install requests python-dotenv
    
    - name: 📋 生成狀態報告
      env:
        EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_RECEIVER: ${{ secrets.EMAIL_RECEIVER }}
        LINE_ENABLED: ${{ secrets.LINE_ENABLED }}
        LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
        LINE_USER_ID: ${{ secrets.LINE_USER_ID }}
        HEARTBEAT_STATUS: ${{ needs.heartbeat.result }}
        ANALYSIS_STATUS: ${{ needs.stock_analysis.result }}
        ANALYSIS_MODE: ${{ needs.system_check.outputs.analysis_mode }}
        TIME_SLOT: ${{ needs.system_check.outputs.time_slot }}
        EVENT_NAME: ${{ github.event_name }}
        REPO_NAME: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      run: |
        python << 'EOF'
        import os
        from datetime import datetime
        import json
        
        # 從環境變數獲取狀態
        heartbeat_status = os.getenv('HEARTBEAT_STATUS', 'skipped')
        analysis_status = os.getenv('ANALYSIS_STATUS', 'skipped')
        analysis_mode = os.getenv('ANALYSIS_MODE', 'unknown')
        time_slot = os.getenv('TIME_SLOT', 'unknown')
        event_name = os.getenv('EVENT_NAME', 'unknown')
        repo_name = os.getenv('REPO_NAME', 'unknown')
        run_id = os.getenv('RUN_ID', 'unknown')
        
        # 生成報告
        trigger_method = "手動執行" if event_name == "workflow_dispatch" else "定時執行"
        system_status = "✅ 系統運行正常" if analysis_status == "success" else "⚠️ 系統執行異常，請檢查日誌"
        
        report = f"""🤖 台股分析系統執行報告
        
⏰ 執行時間: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
🔧 分析模式: {analysis_mode}
📊 分析時段: {time_slot}
🚀 觸發方式: {trigger_method}

📈 執行結果:
💓 心跳檢測: {heartbeat_status}
📊 股票分析: {analysis_status}

🔗 詳細日誌: https://github.com/{repo_name}/actions/runs/{run_id}

{system_status}
        """
        
        print("📋 執行狀態報告:")
        print(report)
        
        # 如果有嚴重錯誤，嘗試發送緊急通知
        if analysis_status == "failure":
            try:
                import smtplib
                from email.mime.text import MIMEText
                
                email_sender = os.getenv('EMAIL_SENDER')
                email_password = os.getenv('EMAIL_PASSWORD')
                email_receiver = os.getenv('EMAIL_RECEIVER')
                
                if email_sender and email_password and email_receiver:
                    msg = MIMEText(report)
                    msg['Subject'] = "🚨 台股分析系統執行失敗"
                    msg['From'] = email_sender
                    msg['To'] = email_receiver
                    
                    server = smtplib.SMTP('smtp.gmail.com', 587)
                    server.starttls()
                    server.login(email_sender, email_password)
                    server.send_message(msg)
                    server.quit()
                    print("📧 緊急通知已發送")
                else:
                    print("⚠️ 郵件配置不完整，無法發送緊急通知")
            except Exception as e:
                print(f"📧 緊急通知發送失敗: {e}")
        EOF

  # 可選: 錯誤處理和重試
  retry_on_failure:
    name: 🔄 失敗重試機制
    runs-on: ubuntu-latest
    needs: [stock_analysis]
    if: failure() && github.event_name == 'schedule'
    
    steps:
    - name: ⏰ 等待重試
      run: sleep 300  # 等待5分鐘
    
    - name: 🔄 觸發重試
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'stock-bot.yml',
            ref: 'main',
            inputs: {
              analysis_mode: 'optimized',
              time_slot: 'afternoon_scan',
              force_notification: 'true'
            }
          });
          console.log('🔄 已觸發重試執行');
