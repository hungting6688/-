# .github/workflows/ultimate-stock-bot.yml
# 終極版股票推薦系統 - 整合全球景氣分析 + 日本市場

name: Ultimate Taiwan Stock Analysis Bot - 2025 Enhanced Edition

on:
  schedule:
    # 早盤掃描 - 台灣時間 09:30 (UTC+8) = UTC 01:30
    - cron: '30 1 * * 1-5'
    # 盤中掃描 - 台灣時間 10:30 (UTC+8) = UTC 02:30  
    - cron: '30 2 * * 1-5'
    # 午間掃描 - 台灣時間 12:30 (UTC+8) = UTC 04:30
    - cron: '30 4 * * 1-5'
    # 盤後深度分析 - 台灣時間 15:30 (UTC+8) = UTC 07:30
    - cron: '30 7 * * 1-5'
    # 週末總結分析 - 台灣時間週六 14:00 (UTC+8) = UTC 06:00
    - cron: '0 6 * * 6'
    # 全球市場開盤前分析 - 台灣時間 21:30 (UTC+8) = UTC 13:30 (美股開盤前)
    - cron: '30 13 * * 1-5'
  
  workflow_dispatch:
    inputs:
      analysis_type:
        description: '選擇分析類型'
        required: true
        default: 'ultimate_analysis'
        type: choice
        options:
          - morning_scan
          - mid_morning_scan
          - mid_day_scan
          - afternoon_analysis
          - weekend_summary
          - pre_us_market_analysis
          - ultimate_analysis
          - test_all_features
      enable_japan_analysis:
        description: '啟用日本市場分析'
        required: false
        type: boolean
        default: true
      risk_tolerance:
        description: '風險偏好設定'
        required: false
        default: 'moderate'
        type: choice
        options:
          - conservative
          - moderate
          - aggressive
      max_recommendations:
        description: '最大推薦數量'
        required: false
        default: '15'
        type: string

env:
  # 時區設定
  TZ: Asia/Taipei
  
  # 🆕 終極版系統配置
  ULTIMATE_SYSTEM_ENABLED: 'True'
  GLOBAL_ECONOMIC_ANALYSIS: 'True'
  SENTIMENT_ANALYSIS_ENABLED: 'True'
  MULTI_FACTOR_MODEL_ENABLED: 'True'
  ML_PREDICTION_ENABLED: 'True'
  ALTERNATIVE_DATA_ENABLED: 'True'
  RISK_MANAGEMENT_ENHANCED: 'True'
  
  # 🇯🇵 日本市場分析配置
  JAPAN_MARKET_ANALYSIS: 'True'
  JAPAN_TAIWAN_CORRELATION: 'True'
  JPY_IMPACT_ANALYSIS: 'True'
  NIKKEI_MOMENTUM_TRACKING: 'True'
  BOJ_POLICY_MONITORING: 'True'
  
  # 🌍 全球市場配置
  US_MARKET_WEIGHT: '0.35'
  CHINA_MARKET_WEIGHT: '0.20'
  JAPAN_MARKET_WEIGHT: '0.15'
  TAIWAN_MARKET_WEIGHT: '0.15'
  EUROPE_MARKET_WEIGHT: '0.15'
  
  # 📧 通知配置 (從 GitHub Secrets 獲取)
  EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
  EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
  EMAIL_RECEIVER: ${{ secrets.EMAIL_RECEIVER }}
  EMAIL_SMTP_SERVER: ${{ secrets.EMAIL_SMTP_SERVER || 'smtp.gmail.com' }}
  EMAIL_SMTP_PORT: ${{ secrets.EMAIL_SMTP_PORT || '587' }}
  EMAIL_USE_TLS: 'True'
  HTML_EMAIL_ENHANCED: 'True'
  
  # 📱 LINE通知配置
  LINE_ENABLED: 'True'
  LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
  LINE_USER_ID: ${{ secrets.LINE_USER_ID }}
  LINE_GROUP_ID: ${{ secrets.LINE_GROUP_ID }}
  
  # 🤖 機器學習配置
  ML_MODEL_UPDATE_FREQUENCY: '7'  # 7天更新一次模型
  ENSEMBLE_MODELS: 'True'
  FEATURE_ENGINEERING_ADVANCED: 'True'
  
  # 📊 風險管理配置
  VAR_CALCULATION: 'True'
  RISK_ADJUSTED_SCORING: 'True'
  PORTFOLIO_OPTIMIZATION: 'True'
  DRAWDOWN_CONTROL: 'True'
  
  # 🔍 替代數據配置
  SENTIMENT_DATA_SOURCES: 'ptt,dcard,google_trends,news'
  ESG_ANALYSIS: 'True'
  SATELLITE_DATA_SIMULATION: 'True'
  
  # ⚙️ 系統效能配置
  ASYNC_PROCESSING: 'True'
  CONCURRENT_ANALYSIS_LIMIT: '10'
  CACHE_ENABLED: 'True'
  CACHE_DURATION_HOURS: '1'

jobs:
  ultimate-stock-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install Enhanced Dependencies
        run: |
          echo "🚀 安裝終極版系統依賴..."
          pip install --upgrade pip
          
          # 基礎套件
          pip install pandas numpy requests aiohttp asyncio
          
          # 金融數據套件
          pip install yfinance ta-lib-binary
          
          # 機器學習套件
          pip install scikit-learn xgboost lightgbm
          
          # 文字分析套件
          pip install jieba textblob vaderSentiment
          
          # 其他增強功能
          pip install matplotlib seaborn plotly
          
          echo "✅ 套件安裝完成"
          
      - name: Validate System Configuration
        run: |
          echo "🔍 驗證系統配置..."
          
          # 檢查必要檔案
          required_files=(
            "ultimate_stock_recommender.py"
            "requirements.txt"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ 缺少必要檔案: $file"
              exit 1
            fi
          done
          
          # 檢查通知配置
          if [ -z "$EMAIL_SENDER" ] || [ -z "$EMAIL_PASSWORD" ] || [ -z "$EMAIL_RECEIVER" ]; then
            echo "⚠️ EMAIL配置不完整，將無法發送郵件通知"
          else
            echo "✅ EMAIL配置完整"
          fi
          
          if [ -z "$LINE_CHANNEL_ACCESS_TOKEN" ]; then
            echo "⚠️ LINE配置不完整，將無法發送LINE通知"
          else
            echo "✅ LINE配置完整"
          fi
          
          echo "SYSTEM_CONFIG_VALID=true" >> $GITHUB_ENV
          
      - name: Initialize System Environment
        run: |
          echo "⚙️ 初始化系統環境..."
          
          # 創建必要目錄
          mkdir -p logs cache data/analysis_results data/ml_models data/alternative_data
          
          # 顯示時區資訊
          echo "🕐 當前時間: $(date)"
          echo "🗾 台灣時間: $(TZ=Asia/Taipei date)"
          echo "🇯🇵 日本時間: $(TZ=Asia/Tokyo date)"
          echo "🇺🇸 美東時間: $(TZ=America/New_York date)"
          
          # 設定分析類型
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ANALYSIS_TYPE="${{ github.event.inputs.analysis_type }}"
            MAX_RECOMMENDATIONS="${{ github.event.inputs.max_recommendations }}"
            RISK_TOLERANCE="${{ github.event.inputs.risk_tolerance }}"
            ENABLE_JAPAN="${{ github.event.inputs.enable_japan_analysis }}"
          else
            # 根據時間自動判斷
            CURRENT_HOUR=$(TZ=Asia/Taipei date +%H)
            CURRENT_DAY=$(TZ=Asia/Taipei date +%u)
            
            case $CURRENT_HOUR in
              01) ANALYSIS_TYPE="morning_scan" ;;
              02) ANALYSIS_TYPE="mid_morning_scan" ;;
              04) 
                if [ $CURRENT_DAY -eq 6 ]; then
                  ANALYSIS_TYPE="weekend_summary"
                else
                  ANALYSIS_TYPE="mid_day_scan"
                fi
                ;;
              07) ANALYSIS_TYPE="afternoon_analysis" ;;
              13) ANALYSIS_TYPE="pre_us_market_analysis" ;;
              *) ANALYSIS_TYPE="ultimate_analysis" ;;
            esac
            
            MAX_RECOMMENDATIONS="15"
            RISK_TOLERANCE="moderate"
            ENABLE_JAPAN="true"
          fi
          
          echo "ANALYSIS_TYPE=$ANALYSIS_TYPE" >> $GITHUB_ENV
          echo "MAX_RECOMMENDATIONS=$MAX_RECOMMENDATIONS" >> $GITHUB_ENV
          echo "RISK_TOLERANCE=$RISK_TOLERANCE" >> $GITHUB_ENV
          echo "ENABLE_JAPAN_ANALYSIS=$ENABLE_JAPAN" >> $GITHUB_ENV
          
          echo "🎯 將執行: $ANALYSIS_TYPE"
          echo "📊 最大推薦數: $MAX_RECOMMENDATIONS"
          echo "⚖️ 風險偏好: $RISK_TOLERANCE"
          echo "🇯🇵 日本分析: $ENABLE_JAPAN"
          
      - name: Run Ultimate Stock Analysis System
        run: |
          echo "🚀 執行終極版股票分析系統..."
          echo "=================================="
          
          # 顯示系統特色
          echo "🌟 終極版系統特色："
          echo "  🌍 全球經濟分析 (美中日台歐)"
          echo "  🇯🇵 日本市場深度整合"
          echo "  🤖 AI機器學習預測"
          echo "  📊 多因子量化模型"
          echo "  💭 社群情感分析"
          echo "  🛡️ 進階風險管理"
          echo "  📡 替代數據整合"
          echo "  🔄 自適應學習系統"
          echo ""
          
          # 根據分析類型顯示預期結果
          case $ANALYSIS_TYPE in
            "morning_scan")
              echo "🌅 早盤掃描分析"
              echo "  📈 分析股票數: 200+"
              echo "  🎯 重點: 開盤動能分析"
              echo "  🇯🇵 日本隔夜影響評估"
              ;;
            "afternoon_analysis")
              echo "🌆 盤後深度分析"
              echo "  📈 分析股票數: 500+"
              echo "  🎯 重點: 綜合基本面分析"
              echo "  🌍 全球市場關聯分析"
              ;;
            "weekend_summary")
              echo "📋 週末總結分析"
              echo "  📈 分析股票數: 1000+"
              echo "  🎯 重點: 深度基本面挖掘"
              echo "  📊 週度趨勢總結"
              ;;
            "pre_us_market_analysis")
              echo "🇺🇸 美股開盤前分析"
              echo "  📈 分析台股ADR影響"
              echo "  🎯 重點: 隔夜美股預期影響"
              ;;
            "ultimate_analysis")
              echo "🎯 終極綜合分析"
              echo "  📈 全功能深度分析"
              echo "  🤖 所有AI模組啟用"
              ;;
          esac
          
          echo ""
          echo "⏳ 開始執行分析..."
          
          # 執行Python分析程式
          python ultimate_stock_recommender.py \
            --analysis-type "$ANALYSIS_TYPE" \
            --max-recommendations "$MAX_RECOMMENDATIONS" \
            --risk-tolerance "$RISK_TOLERANCE" \
            --enable-japan-analysis "$ENABLE_JAPAN_ANALYSIS" \
            --enable-all-features true
          
          echo "✅ 分析執行完成"
          
      - name: Process Analysis Results
        if: success()
        run: |
          echo "📊 處理分析結果..."
          
          # 檢查結果檔案
          if [ -f "data/analysis_results/ultimate_recommendations.json" ]; then
            echo "✅ 推薦結果已生成"
            
            # 顯示推薦統計
            RECOMMENDATION_COUNT=$(python -c "
          import json
          with open('data/analysis_results/ultimate_recommendations.json', 'r', encoding='utf-8') as f:
              data = json.load(f)
              print(len(data.get('recommendations', [])))
          ")
            
            echo "📈 推薦股票數量: $RECOMMENDATION_COUNT"
            
            # 顯示全球經濟概況
            if [ -f "data/analysis_results/global_economic_summary.json" ]; then
              GLOBAL_SCORE=$(python -c "
            import json
            with open('data/analysis_results/global_economic_summary.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                print(f\"{data.get('global_score', 0):.1f}\")
            ")
              echo "🌍 全球經濟分數: $GLOBAL_SCORE/100"
            fi
            
          else
            echo "❌ 未找到分析結果檔案"
            exit 1
          fi
          
      - name: Send Enhanced Notifications
        if: success()
        run: |
          echo "📤 發送增強版通知..."
          
          # 準備通知內容
          NOTIFICATION_TITLE="🚀 終極版台股分析報告"
          NOTIFICATION_SUBTITLE="整合全球景氣 × 日本市場 × AI預測"
          
          # 執行通知發送
          python send_ultimate_notifications.py \
            --title "$NOTIFICATION_TITLE" \
            --subtitle "$NOTIFICATION_SUBTITLE" \
            --analysis-type "$ANALYSIS_TYPE" \
            --include-japan-analysis true \
            --format enhanced
          
          echo "✅ 通知發送完成"
          
      - name: Update System Performance Metrics
        if: success()
        run: |
          echo "📊 更新系統績效指標..."
          
          # 記錄執行統計
          python update_performance_metrics.py \
            --analysis-type "$ANALYSIS_TYPE" \
            --execution-time "$(date -Iseconds)" \
            --recommendations-count "$RECOMMENDATION_COUNT" \
            --global-economic-score "$GLOBAL_SCORE"
          
          echo "✅ 績效指標已更新"
          
      - name: Cleanup and Archive
        if: always()
        run: |
          echo "🧹 清理和歸檔..."
          
          # 壓縮日誌檔案
          if [ -d "logs" ]; then
            tar -czf "logs_$(date +%Y%m%d_%H%M%S).tar.gz" logs/
            echo "📦 日誌檔案已壓縮"
          fi
          
          # 清理暫存檔案
          find cache/ -name "*.tmp" -mtime +1 -delete 2>/dev/null || true
          find data/ -name "*.cache" -mtime +7 -delete 2>/dev/null || true
          
          echo "✅ 清理完成"
          
      - name: Upload Analysis Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ultimate-stock-analysis-${{ env.ANALYSIS_TYPE }}-${{ github.run_number }}
          path: |
            data/analysis_results/
            logs/
            *.tar.gz
          retention-days: 30
          
      - name: Generate Execution Summary
        if: always()
        run: |
          echo "📋 執行摘要"
          echo "=================================="
          echo "🕐 執行時間: $(TZ=Asia/Taipei date)"
          echo "🎯 分析類型: $ANALYSIS_TYPE"
          echo "🌍 全球經濟整合: ✅"
          echo "🇯🇵 日本市場分析: $([ "$ENABLE_JAPAN_ANALYSIS" = "true" ] && echo "✅" || echo "❌")"
          echo "🤖 AI機器學習: ✅"
          echo "📊 多因子模型: ✅"
          echo "💭 情感分析: ✅"
          echo "🛡️ 風險管理: ✅"
          echo "📡 替代數據: ✅"
          echo ""
          
          if [ -n "$RECOMMENDATION_COUNT" ]; then
            echo "📈 推薦結果: $RECOMMENDATION_COUNT 檔股票"
          fi
          
          if [ -n "$GLOBAL_SCORE" ]; then
            echo "🌍 全球經濟: $GLOBAL_SCORE/100 分"
          fi
          
          echo ""
          echo "🎯 終極版特色已全部啟用："
          echo "  ✅ 全球五大經濟體分析 (美中日台歐)"
          echo "  ✅ 日台經濟關聯性深度分析"
          echo "  ✅ AI集成機器學習預測"
          echo "  ✅ 社群情感即時監控"
          echo "  ✅ 多維度風險管理"
          echo "  ✅ 替代數據整合分析"
          echo "  ✅ EMAIL + LINE 雙推播"
          echo ""
          echo "🚀 終極版台股推薦系統執行完成！"
          
      - name: Handle Workflow Failure
        if: failure()
        run: |
          echo "❌ 工作流程執行失敗"
          echo "分析類型: $ANALYSIS_TYPE"
          echo "失敗時間: $(TZ=Asia/Taipei date)"
          echo ""
          echo "可能原因："
          echo "  1. 網路連線問題"
          echo "  2. 數據源異常"
          echo "  3. API配額限制"
          echo "  4. 系統配置錯誤"
          echo ""
          echo "建議檢查："
          echo "  - GitHub Secrets 設定"
          echo "  - 網路連線狀況"
          echo "  - 執行日誌錯誤訊息"
          echo "  - 系統資源使用狀況"
          
          # 嘗試發送失敗通知
          if [ -n "$EMAIL_SENDER" ] && [ -n "$EMAIL_RECEIVER" ]; then
            python send_error_notification.py \
              --error-type "workflow_failure" \
              --analysis-type "$ANALYSIS_TYPE" \
              --timestamp "$(date -Iseconds)" || true
          fi
