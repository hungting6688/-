"""
line_notifier.py - LINEÊé®Êí≠ÈÄöÁü•Ê®°ÁµÑ
ÂØ¶ÁèæLINE Bot APIÊé®Êí≠ËÇ°Á•®ÂàÜÊûêÁµêÊûú
"""
import os
import json
import requests
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional

# Ë®≠ÁΩÆÊó•Ë™å
logger = logging.getLogger(__name__)

class LineNotifier:
    """LINEÊé®Êí≠ÈÄöÁü•Âô®"""
    
    def __init__(self):
        """ÂàùÂßãÂåñLINEÈÄöÁü•Âô®"""
        self.channel_access_token = os.getenv('LINE_CHANNEL_ACCESS_TOKEN')
        self.user_id = os.getenv('LINE_USER_ID')
        self.group_id = os.getenv('LINE_GROUP_ID')
        self.api_url = 'https://api.line.me/v2/bot/message/push'
        
        # È©óË≠âÈÖçÁΩÆ
        self.enabled = self._validate_config()
        
    def _validate_config(self) -> bool:
        """È©óË≠âLINEÈÖçÁΩÆÊòØÂê¶ÂÆåÊï¥"""
        if not self.channel_access_token:
            logger.warning("LINE_CHANNEL_ACCESS_TOKEN Êú™Ë®≠ÁΩÆ")
            return False
        
        if not self.user_id and not self.group_id:
            logger.warning("LINE_USER_ID Êàñ LINE_GROUP_ID Ëá≥Â∞ëË¶ÅË®≠ÁΩÆ‰∏ÄÂÄã")
            return False
        
        return True
    
    def _get_headers(self) -> Dict[str, str]:
        """Áç≤ÂèñAPIË´ãÊ±ÇÊ®ôÈ†≠"""
        return {
            'Authorization': f'Bearer {self.channel_access_token}',
            'Content-Type': 'application/json'
        }
    
    def _send_message(self, to: str, message: Dict[str, Any]) -> bool:
        """
        ÁôºÈÄÅË®äÊÅØÂà∞LINE
        
        ÂèÉÊï∏:
        - to: Êé•Êî∂ËÄÖIDÔºàÁî®Êà∂IDÊàñÁæ§ÁµÑIDÔºâ
        - message: Ë®äÊÅØÂÖßÂÆπ
        
        ËøîÂõû:
        - ÊòØÂê¶ÁôºÈÄÅÊàêÂäü
        """
        if not self.enabled:
            return False
        
        payload = {
            'to': to,
            'messages': [message]
        }
        
        try:
            response = requests.post(
                self.api_url,
                headers=self._get_headers(),
                data=json.dumps(payload),
                timeout=30
            )
            
            if response.status_code == 200:
                logger.info(f"LINEË®äÊÅØÁôºÈÄÅÊàêÂäüÂà∞ {to}")
                return True
            else:
                logger.error(f"LINEË®äÊÅØÁôºÈÄÅÂ§±Êïó: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"LINEË®äÊÅØÁôºÈÄÅÁï∞Â∏∏: {e}")
            return False
    
    def send_text_message(self, text: str, target_type: str = 'user') -> bool:
        """
        ÁôºÈÄÅÁ¥îÊñáÂ≠óË®äÊÅØ
        
        ÂèÉÊï∏:
        - text: Ë®äÊÅØÊñáÂ≠ó
        - target_type: ÁõÆÊ®ôÈ°ûÂûã ('user' Êàñ 'group')
        
        ËøîÂõû:
        - ÊòØÂê¶ÁôºÈÄÅÊàêÂäü
        """
        # ÈÅ∏ÊìáÁôºÈÄÅÁõÆÊ®ô
        if target_type == 'group' and self.group_id:
            to = self.group_id
        elif target_type == 'user' and self.user_id:
            to = self.user_id
        else:
            # ÈªòË™çÂÑ™ÂÖàÁôºÈÄÅÁµ¶ÂÄã‰∫∫
            to = self.user_id or self.group_id
        
        if not to:
            logger.error("Ê≤íÊúâÊúâÊïàÁöÑLINEÁôºÈÄÅÁõÆÊ®ô")
            return False
        
        # LINEÊñáÂ≠óË®äÊÅØÈôêÂà∂2000Â≠óÂÖÉ
        if len(text) > 2000:
            text = text[:1990] + "...(ÂÖßÂÆπÈÅéÈï∑Â∑≤Êà™Âèñ)"
        
        message = {
            'type': 'text',
            'text': text
        }
        
        return self._send_message(to, message)
    
    def send_flex_message(self, alt_text: str, flex_content: Dict[str, Any], target_type: str = 'user') -> bool:
        """
        ÁôºÈÄÅFlexË®äÊÅØÔºàÁµêÊßãÂåñË®äÊÅØÔºâ
        
        ÂèÉÊï∏:
        - alt_text: Êõø‰ª£ÊñáÂ≠ó
        - flex_content: FlexË®äÊÅØÂÖßÂÆπ
        - target_type: ÁõÆÊ®ôÈ°ûÂûã ('user' Êàñ 'group')
        
        ËøîÂõû:
        - ÊòØÂê¶ÁôºÈÄÅÊàêÂäü
        """
        # ÈÅ∏ÊìáÁôºÈÄÅÁõÆÊ®ô
        if target_type == 'group' and self.group_id:
            to = self.group_id
        elif target_type == 'user' and self.user_id:
            to = self.user_id
        else:
            to = self.user_id or self.group_id
        
        if not to:
            logger.error("Ê≤íÊúâÊúâÊïàÁöÑLINEÁôºÈÄÅÁõÆÊ®ô")
            return False
        
        message = {
            'type': 'flex',
            'altText': alt_text,
            'contents': flex_content
        }
        
        return self._send_message(to, message)
    
    def generate_stock_flex_message(self, recommendations: Dict[str, List[Dict]], time_slot: str) -> Dict[str, Any]:
        """
        ÁîüÊàêËÇ°Á•®Êé®Ëñ¶ÁöÑFlexË®äÊÅØÊ†ºÂºè
        
        ÂèÉÊï∏:
        - recommendations: Êé®Ëñ¶Êï∏Êìö
        - time_slot: ÊôÇÊÆµÂêçÁ®±
        
        ËøîÂõû:
        - FlexË®äÊÅØÂÖßÂÆπ
        """
        # ÊôÇÊÆµ‰∏≠ÊñáÂ∞çÊáâ
        time_slot_names = {
            'morning_scan': 'üåÖ Êó©Áõ§ÊéÉÊèè',
            'mid_morning_scan': '‚òÄÔ∏è Áõ§‰∏≠ÊéÉÊèè',
            'mid_day_scan': 'üåû ÂçàÈñìÊéÉÊèè',
            'afternoon_scan': 'üåá Áõ§ÂæåÊéÉÊèè',
            'weekly_summary': 'üìà ÈÄ±Êú´Á∏ΩÁµê'
        }
        
        title = time_slot_names.get(time_slot, 'üìä ËÇ°Á•®ÂàÜÊûê')
        
        # ÂâµÂª∫FlexË®äÊÅØÁµêÊßã
        flex_content = {
            "type": "bubble",
            "header": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": title,
                        "weight": "bold",
                        "size": "xl",
                        "color": "#1DB446"
                    },
                    {
                        "type": "text",
                        "text": datetime.now().strftime('%Y/%m/%d %H:%M'),
                        "size": "sm",
                        "color": "#aaaaaa"
                    }
                ]
            },
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": []
            }
        }
        
        # Ê∑ªÂä†Áü≠Á∑öÊé®Ëñ¶
        if recommendations.get('short_term'):
            short_section = {
                "type": "box",
                "layout": "vertical",
                "margin": "md",
                "contents": [
                    {
                        "type": "text",
                        "text": "üî• Áü≠Á∑öÊé®Ëñ¶",
                        "weight": "bold",
                        "size": "md",
                        "color": "#FF5551"
                    }
                ]
            }
            
            for i, stock in enumerate(recommendations['short_term'][:3]):  # ÊúÄÂ§öÈ°ØÁ§∫3ÊîØ
                change_percent = stock.get('analysis', {}).get('change_percent', 0)
                change_color = "#FF5551" if change_percent > 0 else "#00C851" if change_percent < 0 else "#757575"
                change_text = f"+{change_percent:.1f}%" if change_percent > 0 else f"{change_percent:.1f}%"
                
                stock_box = {
                    "type": "box",
                    "layout": "horizontal",
                    "margin": "sm",
                    "contents": [
                        {
                            "type": "text",
                            "text": f"{stock['code']} {stock['name']}",
                            "size": "sm",
                            "flex": 3
                        },
                        {
                            "type": "text",
                            "text": f"{stock['current_price']}",
                            "size": "sm",
                            "align": "end",
                            "flex": 1
                        },
                        {
                            "type": "text",
                            "text": change_text,
                            "size": "sm",
                            "align": "end",
                            "color": change_color,
                            "flex": 1
                        }
                    ]
                }
                short_section["contents"].append(stock_box)
            
            flex_content["body"]["contents"].append(short_section)
        
        # Ê∑ªÂä†Èï∑Á∑öÊé®Ëñ¶
        if recommendations.get('long_term'):
            long_section = {
                "type": "box",
                "layout": "vertical",
                "margin": "md",
                "contents": [
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "text",
                        "text": "üíé Èï∑Á∑öÊé®Ëñ¶",
                        "weight": "bold",
                        "size": "md",
                        "color": "#FFB000",
                        "margin": "md"
                    }
                ]
            }
            
            for stock in recommendations['long_term'][:3]:  # ÊúÄÂ§öÈ°ØÁ§∫3ÊîØ
                analysis = stock.get('analysis', {})
                dividend_yield = analysis.get('dividend_yield', 0)
                eps_growth = analysis.get('eps_growth', 0)
                
                # Âü∫Êú¨Èù¢Ê®ôÁ±§
                tags = []
                if dividend_yield > 4:
                    tags.append(f"ÊÆñÂà©Áéá{dividend_yield:.1f}%")
                if eps_growth > 10:
                    tags.append(f"EPSÊàêÈï∑{eps_growth:.1f}%")
                
                tags_text = " | ".join(tags) if tags else "Âü∫Êú¨Èù¢Á©©ÂÅ•"
                
                stock_box = {
                    "type": "box",
                    "layout": "vertical",
                    "margin": "sm",
                    "contents": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "contents": [
                                {
                                    "type": "text",
                                    "text": f"{stock['code']} {stock['name']}",
                                    "size": "sm",
                                    "weight": "bold",
                                    "flex": 2
                                },
                                {
                                    "type": "text",
                                    "text": f"{stock['current_price']}ÂÖÉ",
                                    "size": "sm",
                                    "align": "end",
                                    "flex": 1
                                }
                            ]
                        },
                        {
                            "type": "text",
                            "text": tags_text,
                            "size": "xs",
                            "color": "#888888",
                            "margin": "xs"
                        }
                    ]
                }
                long_section["contents"].append(stock_box)
            
            flex_content["body"]["contents"].append(long_section)
        
        # Ê∑ªÂä†È¢®Èö™Ë≠¶Á§∫
        if recommendations.get('weak_stocks'):
            weak_section = {
                "type": "box",
                "layout": "vertical",
                "margin": "md",
                "contents": [
                    {
                        "type": "separator",
                        "margin": "md"
                    },
                    {
                        "type": "text",
                        "text": "‚ö†Ô∏è È¢®Èö™Ë≠¶Á§∫",
                        "weight": "bold",
                        "size": "md",
                        "color": "#FF8A00",
                        "margin": "md"
                    }
                ]
            }
            
            for stock in recommendations['weak_stocks'][:2]:  # ÊúÄÂ§öÈ°ØÁ§∫2ÊîØ
                stock_box = {
                    "type": "box",
                    "layout": "horizontal",
                    "margin": "sm",
                    "contents": [
                        {
                            "type": "text",
                            "text": f"{stock['code']} {stock['name']}",
                            "size": "sm",
                            "flex": 2
                        },
                        {
                            "type": "text",
                            "text": "Ë¨πÊÖéÊìç‰Ωú",
                            "size": "sm",
                            "align": "end",
                            "color": "#FF8A00",
                            "flex": 1
                        }
                    ]
                }
                weak_section["contents"].append(stock_box)
            
            flex_content["body"]["contents"].append(weak_section)
        
        # Ê∑ªÂä†ÂÖçË≤¨ËÅ≤Êòé
        disclaimer = {
            "type": "box",
            "layout": "vertical",
            "margin": "md",
            "contents": [
                {
                    "type": "separator",
                    "margin": "md"
                },
                {
                    "type": "text",
                    "text": "‚ö†Ô∏è Êú¨Â†±ÂëäÂÉÖ‰æõÂèÉËÄÉÔºå‰∏çÊßãÊàêÊäïË≥áÂª∫Ë≠∞\nËÇ°Â∏ÇÊúâÈ¢®Èö™ÔºåÊäïË≥áÈúÄË¨πÊÖé",
                    "size": "xs",
                    "color": "#888888",
                    "margin": "md",
                    "wrap": True
                }
            ]
        }
        
        flex_content["body"]["contents"].append(disclaimer)
        
        return flex_content
    
    def send_stock_recommendations(self, recommendations: Dict[str, List[Dict]], time_slot: str) -> bool:
        """
        ÁôºÈÄÅËÇ°Á•®Êé®Ëñ¶ÈÄöÁü•
        
        ÂèÉÊï∏:
        - recommendations: Êé®Ëñ¶Êï∏Êìö
        - time_slot: ÊôÇÊÆµÂêçÁ®±
        
        ËøîÂõû:
        - ÊòØÂê¶ÁôºÈÄÅÊàêÂäü
        """
        try:
            # ÁîüÊàêFlexË®äÊÅØ
            flex_content = self.generate_stock_flex_message(recommendations, time_slot)
            
            # ÁîüÊàêÊõø‰ª£ÊñáÂ≠ó
            short_count = len(recommendations.get('short_term', []))
            long_count = len(recommendations.get('long_term', []))
            weak_count = len(recommendations.get('weak_stocks', []))
            
            alt_text = f"üìä {time_slot}ÂàÜÊûêÂ†±Âëä\nÁü≠Á∑öÊé®Ëñ¶: {short_count}ÊîØ\nÈï∑Á∑öÊé®Ëñ¶: {long_count}ÊîØ\nÈ¢®Èö™Ë≠¶Á§∫: {weak_count}ÊîØ"
            
            # ÁôºÈÄÅFlexË®äÊÅØ
            success = self.send_flex_message(alt_text, flex_content)
            
            if success:
                logger.info(f"LINEËÇ°Á•®Êé®Ëñ¶ÈÄöÁü•ÁôºÈÄÅÊàêÂäü: {time_slot}")
            else:
                logger.error(f"LINEËÇ°Á•®Êé®Ëñ¶ÈÄöÁü•ÁôºÈÄÅÂ§±Êïó: {time_slot}")
            
            return success
            
        except Exception as e:
            logger.error(f"ÁîüÊàêLINEËÇ°Á•®Êé®Ëñ¶Ë®äÊÅØÂ§±Êïó: {e}")
            return False
    
    def send_heartbeat(self) -> bool:
        """
        ÁôºÈÄÅÂøÉË∑≥Ê™¢Ê∏¨Ë®äÊÅØ
        
        ËøîÂõû:
        - ÊòØÂê¶ÁôºÈÄÅÊàêÂäü
        """
        current_time = datetime.now().strftime('%H:%M:%S')
        message = f"üíì ËÇ°Á•®ÂàÜÊûêÁ≥ªÁµ±ÂøÉË∑≥Ê™¢Ê∏¨\n‚è∞ Ê™¢Ê∏¨ÊôÇÈñì: {current_time}\n‚úÖ Á≥ªÁµ±ÈÅãË°åÊ≠£Â∏∏"
        
        return self.send_text_message(message)

def test_line_notification():
    """Ê∏¨Ë©¶LINEÈÄöÁü•ÂäüËÉΩ"""
    print("üß™ Ê∏¨Ë©¶LINEÈÄöÁü•ÂäüËÉΩ...")
    
    # ÂâµÂª∫LINEÈÄöÁü•Âô®
    line_notifier = LineNotifier()
    
    if not line_notifier.enabled:
        print("‚ùå LINEÈÄöÁü•Êú™ÂïüÁî®ÊàñÈÖçÁΩÆ‰∏çÂÆåÊï¥")
        print("Ë´ãÊ™¢Êü•‰ª•‰∏ãÁí∞Â¢ÉËÆäÊï∏:")
        print("- LINE_CHANNEL_ACCESS_TOKEN")
        print("- LINE_USER_ID Êàñ LINE_GROUP_ID")
        return False
    
    # Ê∏¨Ë©¶ÂøÉË∑≥ÈÄöÁü•
    print("üìß ÁôºÈÄÅÂøÉË∑≥Ê∏¨Ë©¶...")
    heartbeat_success = line_notifier.send_heartbeat()
    
    if heartbeat_success:
        print("‚úÖ ÂøÉË∑≥ÈÄöÁü•ÁôºÈÄÅÊàêÂäü")
    else:
        print("‚ùå ÂøÉË∑≥ÈÄöÁü•ÁôºÈÄÅÂ§±Êïó")
        return False
    
    # Ê∏¨Ë©¶ËÇ°Á•®Êé®Ëñ¶ÈÄöÁü•
    print("üìä ÁôºÈÄÅËÇ°Á•®Êé®Ëñ¶Ê∏¨Ë©¶...")
    
    test_recommendations = {
        "short_term": [
            {
                "code": "2330",
                "name": "Âè∞Á©çÈõª",
                "current_price": 638.5,
                "analysis": {"change_percent": 2.35}
            }
        ],
        "long_term": [
            {
                "code": "2609",
                "name": "ÈôΩÊòé",
                "current_price": 91.2,
                "analysis": {
                    "change_percent": 1.8,
                    "dividend_yield": 7.2,
                    "eps_growth": 35.6
                }
            }
        ],
        "weak_stocks": [
            {
                "code": "1234",
                "name": "Ê∏¨Ë©¶ËÇ°",
                "current_price": 25.8
            }
        ]
    }
    
    stock_success = line_notifier.send_stock_recommendations(test_recommendations, "Ê∏¨Ë©¶ÂàÜÊûê")
    
    if stock_success:
        print("‚úÖ ËÇ°Á•®Êé®Ëñ¶ÈÄöÁü•ÁôºÈÄÅÊàêÂäü")
        print("üì± Ë´ãÊ™¢Êü•ÊÇ®ÁöÑLINEÊòØÂê¶Êî∂Âà∞Ê∏¨Ë©¶Ë®äÊÅØ")
        return True
    else:
        print("‚ùå ËÇ°Á•®Êé®Ëñ¶ÈÄöÁü•ÁôºÈÄÅÂ§±Êïó")
        return False

if __name__ == "__main__":
    # Ë®≠ÁΩÆÊó•Ë™å
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    
    # Âü∑Ë°åÊ∏¨Ë©¶
    test_line_notification()
